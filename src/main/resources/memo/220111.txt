//스프링 빈의 의존관계
멤버, 서비스, 객체, 리포지토리에 저장하고 꺼내오고 테스트도 만들고..

지금은 화면을 붙이고 싶은데..
컨트롤러, 뷰 등이 필요한데 이를 위해선 멤버컨트롤러가 필요한데 멤버 서비스를 통해 등록하고 조회할 수 있도록(의존관계)를 가지도록 만들어야하는데 이 작업을 spring스럽게 해보려 함.

스프링 컨트롤러에 등록하면 하나만 만들고도 다양하게 쓸 수 있음.

@Autowired

생성자에 @Autowired가 되어있으면 멤버 서비스를 스프링 컨테이너에 있는 멤버 서비스와 연결해 사용함. 근데 이것만으론 문제가 있나봄..

... a bean of type 'hello.hellospring.service.MemberService' that could not be found.

멤버 서비스를 찾지 못함.

@Autowired 스프링 컨테이너에서 멤버서비스를 가져옴.

helloController 스프링 컨테이너에 등록됨.
@Autowired: helloController의 memberService를 가져올 생각. MemberService로 가보면.. 얘는 그저 순수한 자바 코드. 스프링이 예를 통해서 어떤 역할을 하는지 알 수 없음. (어노테이션 조차 없어서 알 수가 없는 상황.)

MemberService에 @Service를 붙여주자. 스프링이 작동될 때 @Service를 보고 MemberService를 Service로 등록해줌.
리포지토리도 @Repository로 등록해주면 됨.

@Controller	<외부요청을 받기
@Service		<비즈니스 로직 만들기
@Repository	<데이터를 저장하기

helloController ...>memberService ...> memberRepository
컨트롤러의 서비스와의 연결
@Autowired를 사용.
멤버컨트롤러가 생성될 때 스프링 빈에 있는 객체를 가져다 넣음. 이것이 Dependency Injection(스프링이 주입해줌.)

멤버 서비스도 멤버리포지토리를 필요로함
@Autowired로 연결해줌.
메모리멤버리포지토리를 주입해줌.

Spring이 컨테이너 만들 때 문제없이 잘 된 모습. 다만 컨트롤러와 관련된 내용은 없는 상황.

- 스프링 빈을 등록하는 2가지 방법.(둘 다 알아주자.)
1. 컴포넌트 스캔과 자동 의존관계 설정
@Service @Repository @Controller ...> 컴포넌트 스캔
= @Component
서비스 안에 @Component라는 어노테이션이 등록되어있음. @Controller, @Repository, @Service모두 해당.

스프링이 컴포넌트 관련된 어노테이션이 있으면 컨테이너에 모두 등록시킴. AutoWired로 연결해줌.
(장점들은 뒤에서 계속)
2. 자바 코드로 직접 스프링 빈 등록하기

```
아무데서나 @Component가 있어도 괜찮을까..?
기본적으론 안된다.

우리가 실행하는 것은 HelloSpringApplication.

package hello.hellospring;

이것의 하위 패키지에 있는 파일들을 모두 스프링 컨테이너로 올림. 그 외의 것은 포함시키지 않음. (대상이 안됨.)

@SpringBootApplication
....> @ComponentScan
```

참고: 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록. (유일하게 하나를 등록)

Mem Repo면 Mem만
Mem Serv면 MemServ만

따라서 같은 스프링 빈이면 모두 같은 인스턴스다. 설정으로 싱글톤이 아니게 설정할 수 있다. (@Autowired할 때마다 다른 게 들어가도록 할 수도 있지만..) 메모리 및 자원 절약의 의미



[다음편]자바코드로 직접 스프링 빈 등록하기


-참조
MemberRepository의 구현체가 하나라서 자연스레 MemberMemoryRepository가 주입되었다. (with @Autowired) 그런데 구현체가 여러개라면..?

> 수동등록을 이용한다.
> NoUniqueBeanDefinitionException을 위해 수동, 자동여부를 잘 파악해야한다. 대비책으로 @Qualifier, @Primary 등의 어노테이션으로 해결하는 방법 또한 있다.

https://bit.ly/3r8S4Pu

@Autowired가 MemberController에서 사용되는 과정
1. @Service로 MemberService가 스프링 컨테이너에 등록
2. @Autowired로 스프링 컨테이이너에 등록된 MemberService를 가져옴

https://bit.ly/3rcF1ge

//자바 코드로 직접 스프링 빈 등록하기
컴포넌트 스캔으로 자동으로 빈을 등록하고 @Autowired로 자동 연결까지 해줬었다면.. 이제는 하나하나 스프링 컨테이너에 직접 등록하는 방법도 알아보자.

기존에 표시했던 @Repository, @Service를 지워주자.
@Controller 제외. 그러면 당연히 MemberService가 없다고 오류가 뜰 것임.

이 상태에서... SpringConfig를 만들자.

@Bean
MemberService를 안에있는 로직을 바탕으로 호출.
생성자에서 무언갈 넣어줘야한다..? < 멤버리포지토리

서비스와 리포지터리 모두 스프링 빈에 등록한 후
멤버 서비스와 멤버리포지터리(구현체)와 엮어주어야함.

@Controller는 별 수 없음. @Componenet Scan으로 올라가야함. 내가 설정을 할 수 있는 부분이 아니기에 @Controller 부분은 @Autowired

과거에는 XML이라는 문서로 설정을 하곤 했음.
지금은 XML을 잘 사용하지 않는 편(자바코드 위주로 설정)[생략]
DI : 필드 주입, setter 주입, 생성자 주입 (3가지 방법이 있음)

필드 주입: 무언가 바꿀 수 있는 것들이 많이 없음. 중간에 내가 바꿀 수 있는 방법이 거의 없음. 인텔리제이에서 바로 에러를 내뿜음..

setter 주입: 누군가가 서비스를 쓸 때에 public으로 공개되어있어야 함. 그런데 한 번 세팅(setting)해두면 바꾸는 일이 거의 없음. public으로 노출된다는 점이 위험함. 예전에 많이 썼었음.

생성한 후 더 이상 변경하지 못하도록 막는 것이 중요.
결과적으로 생성자 주입을 권장. 의존관계가 실행중에 동적으로 변하는 경우가 거의 없기 때문. (실행중 변경? 런타임 중간중간에 바꿔치기 되는 경우... 그러한 경우에 config파일을 수정 후 서버에 다시 올리는 방법을 사용.)

생성자 주입 방법을 적극 추천.

***
실무에서 주로 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용. 정형화되지 않거나, 구현 클래스를 변경해야하면 설정을 통해 스프링 빈으로 등록해야함.
***

"상황에 따라 구현 클래스를 변경"

비즈니스 요구사항
...아직 데이터 저장 방식을 정하지 않은 상황..
나중에 해당 리포지토리를 다시 바꾸려 하는데 기존의 코드(서비스를 포함한 나머지 코드)를 하나도 건드리지 않고도 바꿀 수 있는 방법이 있다. 구현체 변경은 필요.

나중에 DB 연결을 하게 된다면..
SpringConfig.java 에서 ... return new DBMemberRepository(); 로 바꿔주기만 하면 충분..! Component로 한다면 여러 파일을 만져야하지만 얘는 그럴 필요가 없음.

주의!
@Autowired를 통한 DI는 스프링이 관리하는 객체에서만 동작. 내가 직접 생성한 객체에선 동작하지 않음.

스프링 컨테이너의 구조, DI의 발전 과정은 스프링 핵심 과정에서..

-참조
Config에서 Controller를 수동등록하지 않는 이유.

의존성 주입을 하는 이유 : 결합도를 낮추기 위함
결합도를 낮추려는 이유 : 객체가 비즈니스 요구사항으로 인해 계속 변하기 때문. (대체로 변화할 여지가 있는 객체)

Controller는 사용자의 URL을 특정 서비스에 전달하는 매퍼의 역할만 할뿐. Config로 굳이 관리하지 않는 이유.
https://bit.ly/3fcAZi0

생성자가 유일할 때에는 @Autowired 없이도 가능하다.
https://bit.ly/3Ga9a5X

생성자 주입이 좋은 이유..!
https://bit.ly/3Fghgc3

서비스, 리포지토리 : 스프링 없이도 동작 가능.
컨트롤러 : 스프링에서 제공하는 기능. (고객의 URL 요청에 맞춰 특정 컨트롤러가 호출되는 행위들 모두 컨트롤러가 제공.) 스프링 없이 컨트롤러만 단독으로 사용하는 일은 사실상 없다.
https://bit.ly/337KUmL

setter 주입에서 private final ..> private 한 이유?
나중에 값을 다시 넣어줄 것을 상정했기 때문.
https://bit.ly/3FjPA5P

//회원 관리 예제 - 웹 MVC 개발
멤버컨트롤러 생성, 의존관계 설정..

회원을 등록하고 조회하는 것을 만들어보자..!
(아주 단순하게 버튼 정도..)

음..? 우리 분명히 static을 만들었는데.. WelcomePage로..
하지만 우선순위가 있다..!

"정적 컨텐츠 이미지" 요청이 먼저 오면 스프링 컨테이너에서 관련 컨테이너가 있는지 찾고 [없으면 그때 static!]

//회원 웹 기능 - 등록
createMemberForm.html
이름만 입력하게 되어있는 간단한 형태의 HTML

회원 등록하는 Controller를 만들고 들어가자.

여기선 @PostMapping을 사용.
MemberForm.java를 생성.

회원가입 ....> members/new (URL에 직접 치면 나오는 방식:Get 방식) createForm()이 매핑 ...> createMemberForm으로 이동(templates에서 검색) ...> 뷰 리졸버가 해당하는 html파일을 찾아서 렌더링 

form 태그: 값을 입력하는 html 태그.
action URL로 POST방식을 이용해 넘김.

action = "/members/new" method="post"
...
<input type="text" id="name" name="name" ... >
*name = " ~ "
~에 해당하는 내용이 서버로 들어가는 키가 됨.

포스트 매핑은 데이터를 폼에 넣어서 보낼 때 POST 사용
GET은 주로 조회할 때 사용

CONTROLLER에서 URL은 같지만 POST방식이라 @PostMapping 작동

<input ... name = "name">을 보고 
Post방식으로 보낸 값이 MemberForm의 name에 감.
form에서 얻은 값을 member로 보냄.

html FORM태그 관련된 내용을 찾아보면 좋아요.
저장된 값들을 조회해해보자.

(지금 당장은 이해가 잘 안가지만..)
프로퍼티 바인딩
https://www.inflearn.com/questions/376041

추가설명
https://bit.ly/3Gs238U

여러 개의 값이 input으로 들어온 경우
with @RequestParam
https://bit.ly/3GidLTB

컨트롤러에서 경로를 설정하는 것에 대하여
/hello == hello
다른 다양한 방식(맛보기)
https://bit.ly/3HQFgnJ

... return "redirect:/"; home 화면으로 보내는 친구.

//회원 웹 기능 - 조회
@GetMapping으로 조회하는 URL부분에 해당하는 부분을 Controller에서 만들어준다.
templates도 이에 맞게 추가시켜준다.

여기서는 thymeleaf가 작동될 예정.
일단 돌려보고 보자.
잘 등록된 모습.
소스 보기를 누르면 번호와 정보가 모두 들어가있는 것을 확인할 수 있음.

템플릿 언어에서 members를 읽어드림.
${members}
members라는 모델안에 있는 것을 꺼내는 것.

리스트로써 member에 대한 정보가 모두 담겨있는 정보를 member모델에 집어넣은 모습. 
자바의 for ~ each 문법과 비슷한 모습.

member.id
getId() getName()에 접근하여 값을 가져와 출력함.
해당 값은 메모리에 있기 때문에 서버를 내리고 다시 키게 되면 member에 저장되어있는 값은 다 지워져있다. 실무에서 이렇게 하면 큰일나겠쥬..
이를 막기 위해 file이나 DB형태로 저장해야할 것..!

데이터 엑세스와 관련된 부분을 다음 부분 부터 다뤄볼 예정..!

-참조
외부 사이트(postman)에서 요청을 보낼때는 어떻게..?
@ResponseBody로는 잘 동작하는데..

HTTP 요청에서 HTML의 데이터를 보낼 때의 content-type은 헤더정보와 함께 넘어간다. 이때 application/x-www-form-urlencoded라는 정보가 포함되어 넘어감.
html form 처럼 동작하려면 해당 정보가 필요하다.

https://bit.ly/3GskqKU

.. th:text = "${member.id}

.id 도트연산자라고 바로 해당 변수로 접근하는 것은 아님.
프로퍼티 규약(자바빈 규약)으로 getter/setter에 접근하는 것. 객체의 데이터는 private으로 안전하게 보호받고 있다.

https://bit.ly/3FbF5BD

////스프링 DB 접근 기술
//H2 데이터베이스 설치
이전 시간에 했던 것들은 메모리에 저장한 것. 서버가 나가면 메모리에 저장된 것들이 다 날아감. 실무에선 DB에 데이터를 저장하여 관리. 아주 가벼운 H2 DB를 설치할 예정. DB SQL을 가지고 application 서버와 연결시킬 것임. 

jdbc 기술을 이용해서 할 것임. 순수한 jdbc로 연결하는 방식을 알아볼 것.(무려 20년 전..) 스프링에서 제공하는 jdbcTemplate을 바탕으로 SQL을 편리하고 나를 수 있는 기술..! SQL 조차 개발자들이 아닌 JPA를 통해 SQL을 날려서 하는 것. 객체를 DB에 쿼리없이 바로 저장하고 관리할 수 있다..! 스프링만큼 오래된 JPA.

JPA를 편리하게 쓸 수 있도록 한 SpringDataJPA. 이 기술들을 다 적용해보면서 바꿔볼 예정..! 메모리리포지토리가 바뀌는 것들을 오늘 확인하게 될 것..!

