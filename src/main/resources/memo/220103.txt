#김영한 님의 강의로 바꿔서 듣고 있습니다.
-- 소개
IoC, DI, AOP
에 묻혀버림..

스프링이 왜 필요해?
동작하는 웹 에플리케이션을 개발하는 것이 목적..!

스프링 프로젝트 생성
스플이 부트로 웹 서버 실행
회원 도메인 개발
웹 MVC 개발
DB 연동..
테스트 케이스 까지

스프링을 직접 돌려보며 어떤 기술들이 어떻게 사용되는지 큰 그림을 머리 속에 장착하는 것이 목표..! 스프링을 만드는 핵심 사이클을 돌려보는 것. 앞으로 어떤 부분을 깊이 있게 학습해야할지를 알게 될 것..!

강의 목표:
스프링 학습의 제대로 된 첫 길잡이 역할
-스프링 기술 그 자체에 매몰 X
-어떻게 사용해야하는지에 초점.

-오래된 스프링 기술 X
-마이너한 스플이 기술 X

실제 실무 개발에 꼭 필요한 내용으로 채움.

"처음부터 끝까지 직접 코딩..!"
직접 코딩하며 따라오면 됩니다.
중간에 스프링 이론들. 그림으로 많이 풀어서 설명드릴 예정.

스프링 완전 정복 로드맵

-스프링 입문
-스프링 핵심 원리
-스프링 웹 MVC
-스프링 DB 데이터 접근 기술
-실전! 스프링 부트

웹 관련 기술
스프링 관련 기술 다 알릴 예정.
Database에 다 저장하는 것이 만만치 않음.
어떤 것이 실무에 쓰이는지를 알려드릴 예정.

스프링 부트..! <매우 거대>
이를 이용해 어떻게 프로젝트를 진행하는 지.. 실무에 필요한 모든 스프링 기술을 확실하게 마스터할 수 있도록 할 것..!

-- 프로젝트 생성
사전 준비물
-Java 11 설치 <막힘이 없기 위해서>
-IDE: IntelliJ 또는 Eclipse 설치
(IntelliJ를 쓸 예정.)

naver, kakao, 배민 등등..
요즘엔 IntelliJ를 많이 써요.
커뮤니티라도 좋아요.
(단축키 같은 것도 중간중간 알려드릴 예정.)

-스프링 부트 스타터 사이트로 이동해서 스프링 프로젝트 생성-
예전엔 밑바닥 부터 다 만들었음.
지금은 스프링 부트를 기반으로 프로젝트를 만듬.

https://start.spring.io

Spring initailizr
스프링 부트를 기반으로 스프링 관련 프로젝트를 만들어주는 사이트.
1. project 
Maven / Gradle
필요한 라이브러리를 땡기고 빌드 라이프사이클 까지 관리해주는 툴.
과거엔 Maven을 많이 썼지만 요즘은 Gradle을 많이 씀.
스프링 라이브러리도 Gradle로 많이 쓰는 추세.
새로 할 때엔 이왕이면 Gradle로.. (주변 사람들도 Gradle로 많이 사용.)

2. Language
Java 선택

3. Spring Boot
2.3.1 <지금은 없음. 스냅샷 안 붙은 걸로 하는 게 좋을 듯> 

4. Project MetaData
Group 그룹명:상관없음
Artifact 프로젝트명
Name
Description...

5. Dependencies
어떤 라이브러리를 땡겨 쓸거냐..? (중요)
-spring web
-Thymeleaf(HTML을 만들어주는 템플릿 엔진 필요, 회사마다 다름(프리마커 같은 걸 쓰기도))

Generate를 누르면 다운로드 해줌.
다운 받은 걸 Home>Study에 넣어두심.(이분은)
IntelliJ에서 Open Or Import
study hello-spring
build.gradle 선택해서 open


라이브러리를 모두 다운받는데 시간이 꽤 걸릴 수 있음

[구조를 살펴보자]
빨간 건 무시.
.idea 인텔리제이 속성파일

gradle > wrapper 
src > main, test

main이랑 test로 나뉘어져있는 것이 표준.
main > java 실제 패키지와 소스코드가 존재
test > test와 관련된 것들이 존재

test라는 것이 요즘 개발에서 중요.
resources(XML, properties 등이 들어감. HTML.. java를 제외한 나머지)

build.gradle (****)
옛날엔 한땀한땀 치곤했던 친구들이지만..
start.spring.io

springBoot로 설정파일까지 모두 제공.

2.3.1 version
java 언어 선택도 플러그인으로 들어가고..
(설정에 대해선 너무 깊이 들어갈 필욘 없음. 버전 설정 + 라이브러리 땡겨오는 구나..)
소스 = '11' //자바 11이라는 뜻.

repositories {
	mavenCentral()	//여기서 공개된 사이트에서 알아서 필요한 디펜던시스를 다운로드받음
}

dependencies {
	implementation ... ~spring-boot-starter-thymeleaf	//우리가 선택한 것들
	implementation ...~spring-boot-starter-test		//우리가 선택한 것들
	testImplementation ... ~starter-test) { ... }	// junit5 라는 라이브러리가 기본적으로 들어감
}

.gitignore
소스코드를 관리해주는 친구.
git은 필요한 소스코드만 올라가야하기에 start.spring.io에서 다 해줌.
(예전에는 한 세월..)

gradlew		//gradle build에서 보자
gradle.bat	//gradle build에서 보자


바로 돌려보자.
compact midlepackages	//패키지들을 .으로 표현
flatten packages		//패키지들을 일일이 분리해서 표현

main > java > hello.spring > Hello..Application.java

public static void main(String[] args){
	...
}

메인 메서드에서 모든 것이 시작하는 자바.
main을 누르면 로그들이 주욱 뜸.

Spring 글씨
Spring Boot (v.2.3.1 Release ...)

Tomcat started on port(s) : 8080 (http) ...
//http가 8080인가보네..

웹브라우저에서 localhost:8080을 치면
Whitable Error Page가 뜨면 성공(?!)
아무것도 없기 때문에 에러페이지가 떠야 성공.
오히려 끄면 사이트를 전혀 나오지 않음. (EZ?)

메인 메서드를 실행하면 SpringApplication.run(해당클래스.class, args);
톰캣이라는 웹서버를 자동으로 내장하여 띄움.
실행하는 장면들을 살펴볼 수 있었다.

번외?
인텔리제이를 쓰면 build가 자바가 gradle 통해서 실행될 때가 있음.
preferences > gradle(검색) build and run using, run tests runing 모두 IntelliJ로 바꿔주자.
그러면 gradle를 통하지 않고 바로 자바를 실행하여 띄움.

[다음편]
어떤 라이브러리들이 사용되는지 알아볼 예정.

-- 라이브러리
깊이 있게 라이브러리 간에 의존관계 보단 들어보는 입장으로..
build.gradle을 열어보면..

thymeleaf, web, test 밖에 없는 듯 보인다.

External Libraries를 열어보면..
상당히 많은 양의 내용이 보임.
tomcat..(웹서버 내장)
junit..
spring boot.. .. startlog, spring-core... 이런 것들은 땡겨온 적이 없는데..?
application을 만들려면 이 정도는 필요한 세상..

gradle, maven 같은 빌드 툴들은 요즘에 의존관계를 모두 관리해줌.
spring starter web을 땡겨오면 이와 관련된 것들이 모두 따라옴.
우리는 web만 필요하지만 그와 관련된 것들을 모두 땡겨옴.
서로서로가 의존하여 core까지도 땡겨오게 되는 구조.

(중요..!)
왼쪽 밑에 살짝 눌러주면(없어졌다 생겼다 하는데..)
gradle 창에..
Dependcies창 밑에

spring-boot
	> ....
	> ....
(*) 표시는 위에 중복된 내용을 제거함을 의미


spring-boot-starter-tomcat
자바 코드를 WAS에 밀어넣는 식으로 웹서버와 개발서버가 분리되어있는 상황.
근데 요즘엔 소스 라이브러리에서 소스를 들고 있음(임베디드, 내장형)
실행만 하는데도 웹서버가 실행. 8080으로 들어가기까지 가능.

라이브러리 하나 빌드해서 웹서버에 올리면 끝.
톰캣을 깔고.. 할 필요가 없는 세상.

-thymeleaf
spring-boot-starter(왠만한 것들과 대부분 의존관계를 지님)
...autoconfigure
...spring-core
모두 땡겨서 spring Boot에서 돌아감.

로그

System.out.println("")으로 출력하면 안됨.
로그로 남겨야 심각한 에러만 담아서 로그 파일이 관리가 됨.

취준생, 서버 세상을 경험해보지 못한 사람은 로그를 왜 쓰지..?
강의에선 sysout도 많이 쓸 예정.

spring-boot-starter-logging
: slf4j	> 인터페이스
: logback	> 실제를 로그를 구현체로 출력하는 방법
시대에 따라 트렌드에 따라 달라지는데..
로그를 어떤 구현체로 출력하는 지에 대한 것.
스프링 부트를 쓰면 기본으로 설치되는 것들.

로그에 대해 궁금한 사항이 있다면 검색해보길**
: slf4j
: logback

두 조합을 많이 쓰다보니 이 둘을 표준으로 씀.

test부분
스프링에서도 junit을 많이 씀. 최근에 junit5버전을 많이 씀.

테스트를 도와주는 친구들. 핵심은 junit.
: mockito
: assertj

스프링과 통합하여 테스트 할 수 있는 라이브러리
: spring-test

[정리]
Gradle은 의존관계가 있는 라이브러리를 함께 다운로드.

"스프링 부트 라이브러리"
#spring-boot-starter-web
	$spring-boot-starter-tomcat : 톰캣(웹서버)
	$spring-webmvx		 : 스프링 웹 MVC
#spring-boot-starter-thymeleaf : 타임리프 템플릿 엔진(View)
#spring-boot-starter(공통) : 스프링 부트 + 스프링 코어 + 로깅
	$spring-boot
		%spring-core
	$spring-boot-starter-logging
		%logback, slf4j

"테스트 라이브러리"
#spring-boot-starter-test
	$junit : 테스트 프레임워크
	$mockito : 목 라이브러리
	$assertj : 테스트 코드를 좀 더 편하게 작성하게 도와주는 라이브러리
	$spring-test : 스프링 통합 테스트 지원

스프링을 경험하신 분은 이해가 잘 되겠지만 처음 접하는 사람은 아..? 싶겠지만..
junit이 뭔지는 써봐야 알지..
그래도 크게크게 이런 부분들을 쓰는구나.. 라고 알아두자.

[다음편]
동작하는 화면을 구현하는 방법

//View 환경 설정
에러페이지만 떴었던 지난시간.
localhost:8080 ...> whiatable Error

Welcome Page를 만들어보자.

resources/static/index.html을 만들면 알아서 welcome page를 만들어줌.

src > main > static(정적 페이지)
index.html 생성.

생성 이후 서버를 재기동 해보자.
웰컴 페이지 생성 완료!

스프링 부트는 (2003년의 release)
스프링 생태계를 감싸서 편하게 사용할 수 있도록 도와줌.
전반의 생태계를 다 제공. 따라서 필요한 걸 찾는 능력이 중요.

spring.io에 접속.
project ...> spring boot > 2.3.1 버전 reference doc을 들어감

index.html 검색
7.1.6 Welcom Page
index.html을 static에서 찾고.. 없으면 index template에서 찾는다는 내용..

Spring.io의 메뉴얼에서 검색하는 능력을 키우자..!

thymeleaf 3. 대에서 성능 개선을 이뤄 괜찮아짐.
Template 엔진에서 제공하는 4가지

-Freemarker
-Groovy
-Thymeleaf
-Mustache

동작하고 프로그래밍 되는 환경을 만들어보자.


웹 프로그램에서 진입하는 첫번째 지점 : Controller
